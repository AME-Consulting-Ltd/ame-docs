{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the AME Consulting Docs","text":""},{"location":"#overview","title":"Overview","text":"<p>This documentation is intended for developers, contributors, and team members who want to understand, contribute to, or operate AME Consulting Ltd.'s internal systems and tools \u2014 with a focus on the AME Timesheets System and related infrastructure.</p> <p>If you're new here, visit the Onboarding section for a guided introduction.</p>"},{"location":"#about-ame-consulting-ltd","title":"About AME Consulting Ltd.","text":"<p>AME Consulting Ltd. is a private, locally-owned Alberta-based engineering firm. We are a team of highly skilled engineers and construction managers brought together through international experience on high-profile mega-pipeline projects.</p> <p>We specialize in: - Mega-pipeline project engineering and management - High-hazard activity planning - Steep slope construction - Trenchless design - Critical lift execution</p> <p>Our mission is to deliver fit-for-purpose, first-principle engineering backed by real-world construction experience.</p> <p>Visit our website</p>"},{"location":"#developer-corner","title":"Developer Corner","text":"<p>We\u2019re actively developing internal tools to support operations, including our flagship project:</p>"},{"location":"#ame-timesheets","title":"AME Timesheets","text":"<p>A digital time-tracking platform for engineering and construction projects.</p> <p>Stack: - Backend: Django (Python) - Frontend: React (Vite) - Infrastructure: AWS - CI/CD: GitHub Actions</p> <p>Explore the AME Timesheets section for more details.</p>"},{"location":"#contributing-to-docs","title":"Contributing to Docs","text":"<p>We use MkDocs with the Material for MkDocs theme.</p> <p>To contribute:</p> <ol> <li>Clone the repo</li> <li>Activate the Python virtual environment</li> <li>Run <code>mkdocs serve</code></li> <li>Make changes in the <code>docs/</code> folder</li> <li>Submit a pull request</li> </ol> <p>More info in How to Use &amp; Contribute to MkDocs</p>"},{"location":"#onboarding","title":"Onboarding","text":"<p>If you're new to AME tools or dev workflows, start here: - Environment Setup - Access &amp; Permissions - Project Overview</p> <p>\u00a9 AME Consulting Ltd. All rights reserved.</p>"},{"location":"ame-timesheets/aws-infra/","title":"AWS Infrastructure (Preliminary Overview)","text":"<p>\u26a0 This page may be out of date or incomplete. If you're familiar with our AWS setup, please help improve it by submitting an update or pull request!</p>"},{"location":"ame-timesheets/aws-infra/#overview","title":"Overview","text":"<p>AME Timesheets uses several AWS services to host and deploy its application stack:</p> <ul> <li>Amazon EC2 \u2013 Hosts the Docker containers for the Django backend and React frontend</li> <li>Amazon ECR \u2013 Stores Docker images built and pushed from GitHub Actions</li> <li>Amazon RDS (PostgreSQL) \u2013 Handles persistent database storage for the backend</li> <li>Amazon S3 \u2013 (Assumed) Stores uploaded files and serves static/media assets</li> <li>IAM Roles and Secrets Manager \u2013 Provides secure credentials and scoped access</li> <li>Route 53 / Elastic IPs \u2013 (Assumed) Used for DNS or static IP mapping for frontend/backend</li> <li>AWS CLI \u2013 Used to authenticate, pull/push images, and deploy containers in EC2 instances</li> </ul>"},{"location":"ame-timesheets/aws-infra/#current-architecture","title":"Current Architecture","text":"<pre><code>Developer Pushes to GitHub \u2192 GitHub Actions Build &amp; Push Docker Images \u2192 ECR\n\nMain Branch Push \u2192 GitHub Actions Deploy to EC2:\n  - Pulls Docker Images\n  - Stops old containers\n  - Runs new containers (backend + frontend)\n  - Runs DB Migrations\n</code></pre>"},{"location":"ame-timesheets/aws-infra/#ec2-details","title":"EC2 Details","text":"<ul> <li>Two EC2 instances (assumed to be Amazon Linux 2)</li> <li>Docker installed</li> <li>SSH access via GitHub Actions + injected secrets (<code>SSH_KEY</code>)</li> <li>Pulls latest images from ECR and runs them</li> </ul>"},{"location":"ame-timesheets/aws-infra/#backend","title":"Backend","text":"<ul> <li>Django runs on port <code>8000</code></li> <li>Migrations are applied after container starts</li> <li><code>.env</code> file is loaded inside container</li> <li><code>.pgpass</code> is used to authenticate with RDS</li> </ul>"},{"location":"ame-timesheets/aws-infra/#frontend","title":"Frontend","text":"<ul> <li>React app (Vite) runs on port <code>4173</code></li> <li>Login credentials and server URL passed via build-time env vars</li> </ul>"},{"location":"ame-timesheets/aws-infra/#deployment-workflow","title":"Deployment Workflow","text":"<ul> <li>Build + Push on Pull Request to <code>main</code>:</li> <li>Triggers <code>build-and-push.yml</code></li> <li>Builds both backend and frontend images</li> <li> <p>Pushes to ECR</p> </li> <li> <p>Deploy on Push to main:</p> </li> <li>Triggers <code>deploy-prod.yml</code></li> <li>Deploys to both EC2 instances</li> </ul>"},{"location":"ame-timesheets/aws-infra/#to-be-confirmed-updated","title":"To Be Confirmed / Updated","text":"<ul> <li>[ ] Are we using S3 for media/static files?</li> <li>[ ] How are EIPs / domain names managed (Route53)?</li> <li>[ ] Do we use a load balancer or DNS round-robin between EC2 instances?</li> <li>[ ] Are logs collected anywhere (e.g., CloudWatch)?</li> <li>[ ] Are there VPC or security group customizations?</li> <li>[ ] Is HTTPS termination handled via Nginx or another service?</li> </ul>"},{"location":"ame-timesheets/aws-infra/#related-files","title":"Related Files","text":"<ul> <li><code>.github/workflows/build-and-push.yml</code></li> <li><code>.github/workflows/deploy-prod.yml</code></li> <li><code>backend.env</code></li> <li>Dockerfiles for backend and frontend</li> </ul> <p>\ud83d\udee0 Contribute: Please help fill in the gaps by editing this file or opening a pull request.</p>"},{"location":"ame-timesheets/backend/","title":"Backend (Django API) \u2013 Under Construction","text":"<p>Welcome to the backend documentation for the AME Timesheets platform.</p> <p>This backend service is built using Django REST Framework, and powers all timesheet-related features, including:</p> <ul> <li>Authentication and authorization</li> <li>Timesheet creation and approval flow</li> <li>Project, client, and user management</li> <li>AWS-integrated file storage and signature processing</li> <li>EC2 + PostgreSQL + S3 deployment pipeline</li> </ul>"},{"location":"ame-timesheets/backend/#work-in-progress","title":"Work in Progress","text":"<p>This documentation page is still under development. We're working to include:</p> <ul> <li>Endpoint descriptions with sample requests and responses</li> <li>Models and relationships (ERD / ORM breakdown)</li> <li>Authentication flow (token management, session rules)</li> <li>How environment variables power runtime config</li> <li>Integration details with S3 and Signature API</li> <li>Test strategy, fixtures, and CI/CD validation steps</li> </ul>"},{"location":"ame-timesheets/backend/#want-to-help","title":"Want to Help?","text":"<p>If you\u2019re familiar with the backend codebase and want to help document:</p> <ul> <li>How views and serializers are structured</li> <li>Gotchas for onboarding new developers</li> <li>Admin setup or how the approval logic works</li> </ul> <p>\u2026then please open a PR or reach out in the internal dev channel. You can edit this page directly at:</p> <p>GitHub Link to backend.md</p> <p>Thanks for contributing to a stronger engineering culture.</p>"},{"location":"ame-timesheets/ci-cd/","title":"CI/CD Pipeline","text":"<p>This page outlines the continuous integration and continuous deployment (CI/CD) process for the AME Timesheets platform.</p>"},{"location":"ame-timesheets/ci-cd/#full-cicd-pipeline-diagram","title":"Full CI/CD Pipeline Diagram","text":"<pre><code>flowchart TD\n  A[Pull Request to main] --&gt; B[GitHub Actions: build-and-push.yml]\n  B --&gt; C[Configure AWS Credentials]\n  C --&gt; D[Login to ECR]\n  D --&gt; E[Build Backend Image with Build Args]\n  E --&gt; F[Push Backend to ECR]\n  D --&gt; G[Build Frontend Image with Build Args]\n  G --&gt; H[Push Frontend to ECR]\n\n  I[Push to main] --&gt; J[GitHub Actions: deploy-prod.yml]\n  J --&gt; K[Run for each EC2 IP]\n  K --&gt; L[SSH into EC2]\n  L --&gt; M[Configure AWS CLI and pgpass]\n  M --&gt; N[Login to ECR from EC2]\n  N --&gt; O[Pull Backend Image]\n  O --&gt; P[Stop &amp; Remove Old Backend]\n  P --&gt; Q[Run New Backend Container]\n  Q --&gt; R[Copy pgpass into Container]\n  R --&gt; S[Restart Backend]\n  S --&gt; T[Run Migrations]\n\n  N --&gt; U[Pull Frontend Image]\n  U --&gt; V[Stop &amp; Remove Old Frontend]\n  V --&gt; W[Run New Frontend Container]</code></pre>"},{"location":"ame-timesheets/ci-cd/#overview","title":"Overview","text":"<p>Our CI/CD system uses GitHub Actions to automate the building, testing, and deployment of our backend (Django) and frontend (React) services. The process involves two main workflows:</p> <ol> <li>build-and-push.yml \u2013 Builds Docker images and pushes them to AWS ECR when a pull request is created or updated.</li> <li>deploy-prod.yml \u2013 Deploys the latest images to our EC2 instances on every push to the <code>main</code> branch.</li> </ol>"},{"location":"ame-timesheets/ci-cd/#step-by-step-breakdown","title":"Step-by-Step Breakdown","text":""},{"location":"ame-timesheets/ci-cd/#1-pull-request-trigger-build-and-pushyml","title":"1. Pull Request Trigger (build-and-push.yml)","text":"<ul> <li>Trigger: Any PR targeting <code>main</code></li> <li>Steps:</li> <li>Configure AWS credentials</li> <li>Log in to Amazon ECR</li> <li>Build the backend Docker image (injecting secrets and environment variables)</li> <li>Build the frontend Docker image (injecting Vite-specific env vars)</li> <li>Push both images to the appropriate AWS ECR repositories</li> </ul>"},{"location":"ame-timesheets/ci-cd/#2-main-branch-push-trigger-deploy-prodyml","title":"2. Main Branch Push Trigger (deploy-prod.yml)","text":"<ul> <li>Trigger: Push to <code>main</code></li> <li>Strategy: Runs per EC2 IP</li> <li>Steps:</li> <li>SSH into each EC2 instance</li> <li>Configure AWS CLI and PostgreSQL passwordless authentication</li> <li>Pull latest backend and frontend images from ECR</li> <li>Clean up old containers and volumes</li> <li>Run new containers</li> <li>Run Django migrations for backend</li> </ul> <p>If you notice anything outdated or missing, please open a PR or message in the internal dev channel.</p>"},{"location":"ame-timesheets/frontend/","title":"Frontend (React + Vite) \u2013 Under Construction","text":"<p>Welcome to the frontend documentation for the AME Timesheets platform.</p> <p>This frontend client is built using React with Vite and provides the user interface for all timesheet-related tasks, including:</p> <ul> <li>Admin login and authentication</li> <li>Timesheet dashboard and task inputs</li> <li>PDF previews and digital signature flow</li> <li>API integration with the Django backend</li> <li>Deployment using Docker and AWS EC2</li> </ul>"},{"location":"ame-timesheets/frontend/#work-in-progress","title":"Work in Progress","text":"<p>This documentation page is still under development. We're working to include:</p> <ul> <li>Component structure and file organization</li> <li>API hooks and request patterns (Axios, fetch, etc.)</li> <li>How environment variables affect runtime config</li> <li>User flow diagrams and page logic explanations</li> <li>Styling conventions and UI libraries used</li> <li>Troubleshooting build and deployment issues</li> </ul>"},{"location":"ame-timesheets/frontend/#want-to-help","title":"Want to Help?","text":"<p>If you\u2019re familiar with the frontend codebase and want to help document:</p> <ul> <li>How the login/auth system is wired</li> <li>What each page/component is responsible for</li> <li>Best practices for contributing or debugging locally</li> </ul> <p>\u2026then please open a PR or reach out in the internal dev channel. You can edit this page directly at:</p> <p>GitHub Link to frontend.md</p> <p>Thanks for contributing to a stronger engineering culture.</p>"},{"location":"how-to/contributing/","title":"Contributing to Documentation","text":"<p>This guide explains how to contribute to AME's internal documentation using Material for MkDocs, a modern static site generator built on top of MkDocs.</p>"},{"location":"how-to/contributing/#1-clone-the-documentation-repository","title":"1. Clone the Documentation Repository","text":"<p>Make sure you are a member of the AME GitHub Organization and have access to the documentation repository.</p> <pre><code>git clone https://github.com/AME-Consulting-Ltd/ame-docs.git\ncd ame-docs\n</code></pre>"},{"location":"how-to/contributing/#2-set-up-your-environment","title":"2. Set Up Your Environment","text":"<p>Install Python (latest version) and then set up a virtual environment:</p> <pre><code>python -m venv venv\nsource venv/Scripts/activate  # Windows Git Bash\n# or\nvenv\\Scripts\\activate.bat   # Command Prompt\n</code></pre> <p>Install MkDocs and the Material theme:</p> <pre><code>pip install mkdocs-material\n</code></pre> <p>Optionally, install live reload plugins:</p> <pre><code>pip install mkdocs-literate-nav mkdocs-glightbox\n</code></pre>"},{"location":"how-to/contributing/#3-preview-the-docs-locally","title":"3. Preview the Docs Locally","text":"<p>From the root of the project, run:</p> <pre><code>mkdocs serve\n</code></pre> <p>Visit the local site at: http://127.0.0.1:8000</p>"},{"location":"how-to/contributing/#4-adding-content","title":"4. Adding Content","text":"<p>All documentation pages are located inside the <code>docs/</code> directory.</p> <ul> <li>Use <code>.md</code> (Markdown) files for each page.</li> <li>Organize sections in folders like:</li> <li><code>docs/ame-timesheets/</code></li> <li><code>docs/onboarding/</code></li> <li><code>docs/how-to/</code></li> </ul> <p>Edit the navigation structure in <code>mkdocs.yml</code> to reflect new or moved pages.</p> <p>Example:</p> <pre><code>nav:\n  - Home: index.md\n  - Onboarding:\n      - Environment Setup: onboarding/setup.md\n</code></pre>"},{"location":"how-to/contributing/#5-style-formatting-guidelines","title":"5. Style &amp; Formatting Guidelines","text":"<ul> <li>Use level 1 headings (<code>#</code>) only for page titles</li> <li>Keep page titles consistent with <code>mkdocs.yml</code></li> <li>Favor clarity over cleverness</li> <li>Use lists, bullet points, and code blocks where helpful</li> <li>Follow Material for MkDocs syntax</li> </ul>"},{"location":"how-to/contributing/#6-building-for-production","title":"6. Building for Production","text":"<p>To generate a static site:</p> <pre><code>mkdocs build\n</code></pre> <p>The final site will be generated in the <code>site/</code> folder.</p>"},{"location":"how-to/contributing/#7-deployment-under-construction","title":"7. Deployment (Under Construction)","text":"<p>This site will be hosted via GitHub Pages once it's finalized.</p> <p>In the future, updates will be pushed to the <code>gh-pages</code> branch via:</p> <pre><code>mkdocs gh-deploy\n</code></pre> <p>For now, deployment details are under construction.</p>"},{"location":"how-to/contributing/#helpful-resources","title":"Helpful Resources","text":"<ul> <li>MkDocs: https://www.mkdocs.org/</li> <li>Material for MkDocs: https://squidfunk.github.io/mkdocs-material/</li> <li>Markdown Cheatsheet: https://www.markdownguide.org/basic-syntax/</li> </ul> <p>Please reach out to the maintainers if you have questions or want help making your first contribution.</p>"},{"location":"onboarding/access/","title":"Access &amp; Permissions","text":"<p>This section outlines the various systems you may need access to in order to contribute to AME projects. Detailed instructions are coming soon.</p>"},{"location":"onboarding/access/#under-construction","title":"Under Construction","text":"<p>We are currently building this section. Below is a list of the systems that will be covered, along with the required access:</p>"},{"location":"onboarding/access/#aws-access","title":"AWS Access","text":"<p>Details on IAM permissions, CLI setup, and EC2/ECR/RDS access.</p>"},{"location":"onboarding/access/#wix-access","title":"Wix Access","text":"<p>Used for updating the AME website.</p>"},{"location":"onboarding/access/#godaddy-access","title":"GoDaddy Access","text":"<p>Used for domain management and DNS configurations.</p>"},{"location":"onboarding/access/#ame-email-access","title":"AME Email Access","text":"<p>Google Workspace email account for company communication and account provisioning.</p>"},{"location":"onboarding/access/#linkedin-access","title":"LinkedIn Access","text":"<p>Used for managing the AME company profile and posting updates.</p>"},{"location":"onboarding/access/#google-business-listing-access","title":"Google Business Listing Access","text":"<p>Used for managing our Google Maps and business presence.</p> <p>More information will be added shortly. Please reach out to an internal admin if you need urgent access.</p>"},{"location":"onboarding/projects/","title":"Project Overview","text":""},{"location":"onboarding/projects/#ame-timesheets","title":"AME Timesheets","text":"<p>A digital time-tracking system used internally by AME Consulting Ltd. Designed for field engineers and office staff to record time across multiple projects and clients.</p> <p>Tech Stack: - Frontend: React + Vite - Backend: Django REST Framework - Infrastructure: Dockerized and deployed on AWS EC2, ECR, RDS (PostgreSQL) - CI/CD: Automated deployment via GitHub Actions</p> <p>This system is actively developed and deployed internally. For detailed setup and technical guides, refer to the AME Timesheets section of the documentation.</p>"},{"location":"onboarding/setup/","title":"Environment Setup","text":"<p>To contribute to AME internal tools like the Timesheet System, ensure the following tools and accounts are set up.</p>"},{"location":"onboarding/setup/#required-accounts-access","title":"Required Accounts &amp; Access","text":"<ul> <li>AME GitHub Organization \u2013 for cloning and contributing to repositories</li> <li>AME Company Email \u2013 for internal communications and identity</li> <li>AWS Account Access \u2013 for managing EC2, ECR, and RDS infrastructure</li> </ul>"},{"location":"onboarding/setup/#required-software","title":"Required Software","text":"Tool Purpose Python (latest) Backend (Django REST) Node.js (LTS) Frontend (React + Vite) Docker Containerization and Deployment Git Version Control AWS CLI AWS service integration Visual Studio Code (recommended) Development IDE"},{"location":"onboarding/setup/#frameworks-and-tech-stack","title":"Frameworks and Tech Stack","text":"<ul> <li>React + Vite \u2013 Frontend development</li> <li>Django REST Framework \u2013 Backend API</li> <li>Docker \u2013 Used locally and in production</li> <li>GitHub Actions \u2013 CI/CD pipelines</li> <li>PostgreSQL (via RDS) \u2013 Relational database</li> </ul>"},{"location":"onboarding/setup/#initial-setup-checklist","title":"Initial Setup Checklist","text":"<ul> <li>[ ] Clone the GitHub repo</li> <li>[ ] Install Python and Node.js</li> <li>[ ] Set up <code>.env</code> files for both frontend and backend</li> <li>[ ] Test local dev environment</li> <li>[ ] Request AWS and GitHub access if not already granted</li> </ul>"}]}